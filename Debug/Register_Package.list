
Register_Package.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000018c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000350  08000350  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000350  08000350  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000350  08000350  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000350  08000350  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000350  08000350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  0800036c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800036c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f24  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000fa  00000000  00000000  00020fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000210a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  000210f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f68  00000000  00000000  0002111d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004c8  00000000  00000000  00022085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000454c  00000000  00000000  0002254d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000054  00000000  00000000  00026a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00026af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000338 	.word	0x08000338

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08000338 	.word	0x08000338

08000204 <main>:
	GPIO_AFRL_t* GPIOD_AFRL_t					= (GPIO_AFRL_t*)(0x40020820U + 0x0C00);
	GPIO_AFRH_t* GPIOD_AFRH_t					= (GPIO_AFRH_t*)(0x40020824U + 0x0C00);


int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	while (1){
	ClockEN->GPIOA = 1;
 8000208:	4b1f      	ldr	r3, [pc, #124]	; (8000288 <main+0x84>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	7813      	ldrb	r3, [r2, #0]
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	7013      	strb	r3, [r2, #0]
	GPIOA_MODER_t->MODER10 =1;
 8000214:	4b1d      	ldr	r3, [pc, #116]	; (800028c <main+0x88>)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	6813      	ldr	r3, [r2, #0]
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA_MODER_t->MODER11 =0;
 8000220:	4b1a      	ldr	r3, [pc, #104]	; (800028c <main+0x88>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	6813      	ldr	r3, [r2, #0]
 8000226:	f36f 23cb 	bfc	r3, #11, #1
 800022a:	6013      	str	r3, [r2, #0]
	GPIOA_MODER_t->MODER0 =0;
 800022c:	4b17      	ldr	r3, [pc, #92]	; (800028c <main+0x88>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	6813      	ldr	r3, [r2, #0]
 8000232:	f36f 0300 	bfc	r3, #0, #1
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA_MODER_t->MODER1 =0;
 8000238:	4b14      	ldr	r3, [pc, #80]	; (800028c <main+0x88>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	6813      	ldr	r3, [r2, #0]
 800023e:	f36f 0341 	bfc	r3, #1, #1
 8000242:	6013      	str	r3, [r2, #0]
	GPIOA_PUPDR_t->PUPDR0 = 1;
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <main+0x8c>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]
	GPIOA_PUPDR_t->PUPDR1 = 0;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <main+0x8c>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	6813      	ldr	r3, [r2, #0]
 8000256:	f36f 0341 	bfc	r3, #1, #1
 800025a:	6013      	str	r3, [r2, #0]
while(1){
	if (GPIOA_Input_DATA_t->IDATA0 ==1){
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <main+0x90>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2b01      	cmp	r3, #1
 800026a:	d106      	bne.n	800027a <main+0x76>
		GPIOA_Output_DATA_t->ODATA5 =1;
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <main+0x94>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	8813      	ldrh	r3, [r2, #0]
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	8013      	strh	r3, [r2, #0]
 8000278:	e7f0      	b.n	800025c <main+0x58>
	}
	else {
		GPIOA_Output_DATA_t->ODATA5 =0;
 800027a:	4b07      	ldr	r3, [pc, #28]	; (8000298 <main+0x94>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	8813      	ldrh	r3, [r2, #0]
 8000280:	f36f 1345 	bfc	r3, #5, #1
 8000284:	8013      	strh	r3, [r2, #0]
	if (GPIOA_Input_DATA_t->IDATA0 ==1){
 8000286:	e7e9      	b.n	800025c <main+0x58>
 8000288:	20000000 	.word	0x20000000
 800028c:	20000004 	.word	0x20000004
 8000290:	20000008 	.word	0x20000008
 8000294:	2000000c 	.word	0x2000000c
 8000298:	20000010 	.word	0x20000010

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 f811 	bl	80002f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ff99 	bl	8000204 <main>

080002d2 <LoopForever>:

LoopForever:
  b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80002e0:	08000358 	.word	0x08000358
  ldr r2, =_sbss
 80002e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80002e8:	20000030 	.word	0x20000030

080002ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC_IRQHandler>
	...

080002f0 <__libc_init_array>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	4d0d      	ldr	r5, [pc, #52]	; (8000328 <__libc_init_array+0x38>)
 80002f4:	4c0d      	ldr	r4, [pc, #52]	; (800032c <__libc_init_array+0x3c>)
 80002f6:	1b64      	subs	r4, r4, r5
 80002f8:	10a4      	asrs	r4, r4, #2
 80002fa:	2600      	movs	r6, #0
 80002fc:	42a6      	cmp	r6, r4
 80002fe:	d109      	bne.n	8000314 <__libc_init_array+0x24>
 8000300:	4d0b      	ldr	r5, [pc, #44]	; (8000330 <__libc_init_array+0x40>)
 8000302:	4c0c      	ldr	r4, [pc, #48]	; (8000334 <__libc_init_array+0x44>)
 8000304:	f000 f818 	bl	8000338 <_init>
 8000308:	1b64      	subs	r4, r4, r5
 800030a:	10a4      	asrs	r4, r4, #2
 800030c:	2600      	movs	r6, #0
 800030e:	42a6      	cmp	r6, r4
 8000310:	d105      	bne.n	800031e <__libc_init_array+0x2e>
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f855 3b04 	ldr.w	r3, [r5], #4
 8000318:	4798      	blx	r3
 800031a:	3601      	adds	r6, #1
 800031c:	e7ee      	b.n	80002fc <__libc_init_array+0xc>
 800031e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000322:	4798      	blx	r3
 8000324:	3601      	adds	r6, #1
 8000326:	e7f2      	b.n	800030e <__libc_init_array+0x1e>
 8000328:	08000350 	.word	0x08000350
 800032c:	08000350 	.word	0x08000350
 8000330:	08000350 	.word	0x08000350
 8000334:	08000354 	.word	0x08000354

08000338 <_init>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr

08000344 <_fini>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr
